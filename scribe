#!/usr/bin/env ruby
$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/lib"

require 'crypto'
require 'sqlite3'
require 'csv'
require 'customization'

PASS_DIR = "#{ENV['HOME']}/.scribe/".freeze

##
# Check Operating System Info for OS Specific needs
##
def check_os
  # Enable and Configure OpenBSD OS Allowed System Calls and Filesystem Protections
  if RUBY_PLATFORM.include? 'openbsd'
    require 'pledge'
    require 'unveil'

    Pledge.unveil("#{ENV['HOME']}" => 'rwc')
    Pledge.pledge('rpath wpath cpath flock tty')
    $VERBOSE = nil # Pledge causes weirdness with SQLite3 gem, workaround to surpress encoding warning: warning: failed to load encoding (utf-16le); use ascii-8bit instead
  end
end

##
# Ensures folder and database has been created.
##
def start_up
  if !File.directory?(PASS_DIR)
    Dir.mkdir(PASS_DIR)
    vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"

    # Set up Password Database
    vault.execute <<-SQL
      CREATE TABLE IF NOT EXISTS passwords(
        site_name TEXT,
        username TEXT,
        password TEXT,
        date_modified TEXT
      );
    SQL
  end
end

##
# Insert New Entry into Database
##
def insert_into_db(site_name, username, password)
  vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"
  vault.execute 'INSERT INTO passwords (site_name, username, password, date_modified) VALUES (?, ?, ?, ?)', site_name, username, Crypto::encrypt_line(password), Time.now.strftime('%m/%d/%Y')
  puts "Added #{site_name} information successfully!".green.bold
end

##
# Delete Entry from Database.
##
def delete_from_db(query)
  check_value(query, "Site")
  
  vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"
  vault.results_as_hash = true

  results = vault.execute 'SELECT * FROM passwords WHERE site_name = ?', query
  if results.empty?
    puts 'No Results Found!'.red.bold
  else
    vault.execute 'DELETE FROM passwords WHERE site_name = ?', query
    puts "Deleted #{query} successfully!"
  end
end

# Modify Entry from Database

##
# Query Database by Site Name
##
def query_db(query)
  check_value(query, "Site")

  vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"
  vault.results_as_hash = true
  if query == 'all'
    results = vault.execute 'SELECT * from passwords'
  else
    results = vault.execute 'SELECT * FROM passwords WHERE site_name = ?', query
  end

  if results.empty?
    puts 'No Results Found!'.red.bold
  else
    output_results(results);
  end
end

##
# Query Database Automagically
##
def auto_query_db(query, password)
  check_value(query, "Site")
  
  vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"
  vault.results_as_hash = true
  
  results = vault.execute 'SELECT * FROM passwords WHERE site_name = ?', query
  if results.empty?
    puts 'No Results Found!'
  else
    auto_output_results(results, password)
  end
end

##
# Output_Results SSH Edition
##
def auto_output_results(results, password)
  results.each do |row|
    plain_text_password = Crypto.auto_decrypt(row['password'], password)
    puts "Site Name: #{row['site_name']}"
    puts "Username: #{row['username']}"
    puts "Password: #{plain_text_password}"
    puts "Date Modified: #{row['date_modified']}"
    puts ''
    plain_text_password.clear
  end
end

##
# Exports Passwords into a CSV.
##
def export_passwords 
  vault = SQLite3::Database.open "#{PASS_DIR}/vault.db"
  vault.results_as_hash = true
  results = vault.execute 'SELECT * from passwords'

  if results.empty?
    puts 'No Passwords to Export!'
  else
    decrypted_password = Crypto.get_password('Enter Decryption Password')
    cur_time = Time.now.strftime('%m%d%y')
    export_file_name = "#{ENV['HOME']}/Scribe_Password_#{cur_time}.csv"
  
    file = File.new(export_file_name, 'w')
    file.puts('site_name,username,password')
    results.each do |row|
      plain_text_password = Crypto.decrypt_line(row['password'], decrypted_password)
      file.puts("#{row['site_name']},#{row['username']},#{plain_text_password}")
      plain_text_password.clear
    end
  end
  puts "Exported! File is named: #{export_file_name}!".green.bold
  puts 'Warning! Passwords are in PLAIN TEXT for Scribe Importation!'.red.bold
end

##
# Output Results from Query
##
def output_results(results)
  decrypted_password = Crypto.get_password('Enter Decryption Password')
  results.each do |row|
    plain_text_password = Crypto.decrypt_line(row['password'], decrypted_password)
    puts "Site Name: #{row['site_name']}".blue.bold
    puts "Username: #{row['username']}".green
    puts "Password: #{plain_text_password}".green
    puts "Date Modified: #{row['date_modified']}".green
    puts ''
    plain_text_password.clear
  end
end

##
# Import Passwords from CSV.
##
def import_passwords(file_location)
  check_value(file_location, "File Location")

  encryption_password = Crypto.get_password('Enter Password to Encrypt Imported Passwords')
  CSV.foreach(file_location, headers: true) do |row|
    insert_into_db(row['site_name'], row['username'], row['password'], encryption_password)
  end
  puts 'Importation Done!'.green.bold
end

##
# Handle Arguments
##
def decisions(arg_array)
  case arg_array[0]
  when 'get'
    query_db(arg_array[1])
  when 'auto-get'
	  auto_query_db(arg_array[1], arg_array[2])
  when 'add'
    if(arg_array.length < 4)
      puts "Error: Missing Information! Check out help: scribe help".red.bold
      exit(1)
    else
      insert_into_db(arg_array[1], arg_array[2], arg_array[3])
    end
  when 'remove'
    delete_from_db(arg_array[1])
  when 'import'
    import_passwords(arg_array[1])
  when 'export'
    export_passwords
  when 'gen'
    Crypto.gen_password(arg_array[1])
  when 'help'
    usage
  when 'about'
    about
  else
    puts 'ERROR: Not a command! Check out help: scribe help'.red.bold
    exit(1)
  end
end


##
# Checks Value for Nil, used for site names, file location.
##
def check_value(value, type)
  if(value == nil)
    puts "No #{type} Given!".red.bold
    exit(1)
  end
end

##
# Usage
##
def usage
  puts 'scribe [arg1 ... arg4]'
  puts 'Args:'
  puts 'add <site> <username> <password>         Add Site to Password Vault'
  puts 'auto-get <site> <encryption password>    For SSH commands. Not recommended.'
  puts 'get <site_name>                          Get Site info from Password Vault'
  puts 'import <file name>                       Import CSV file of passwords'
  puts 'export                                   Export CSV file of Password Vault'
  puts 'gen <num of characters>                  Generates a SecureRandom Base64 Password. Default 15.'
  puts 'help                                     Display this help'
  puts 'about                                    Display about page'

end

##
# About
##
def about
  puts 'Scribe: A CLI Password Manager'.blue
  puts 'Version 0.9'.blue
  puts 'Written by James Gillman'.blue
end


##
# Main Function
##
def main
  check_os
  arg_array = ARGV
  start_up
  decisions(arg_array)
  exit(0)
end

main
